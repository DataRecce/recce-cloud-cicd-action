name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript types
        run: npx tsc --noEmit

      - name: Check code formatting
        run: npm run format-check

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build action
        run: npm run build

      - name: Check for uncommitted changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Error: There are uncommitted changes after building"
            git status --porcelain
            git diff
            exit 1
          fi

  test-action:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create mock DBT artifacts
        run: |
          mkdir -p target
          cat > target/manifest.json << 'EOF'
          {
            "metadata": {
              "adapter_type": "postgres",
              "dbt_version": "1.7.0"
            },
            "nodes": {}
          }
          EOF

          cat > target/catalog.json << 'EOF'
          {
            "metadata": {
              "generated_at": "2024-01-01T00:00:00Z"
            },
            "nodes": {}
          }
          EOF

      - name: Test action (dry run)
        id: test-action
        continue-on-error: true
        uses: ./
        with:
          dbt_target_path: 'target'
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Verify action executed
        run: |
          if [ "${{ steps.test-action.outcome }}" != "success" ] && [ "${{ steps.test-action.outcome }}" != "failure" ]; then
            echo "Action did not execute properly"
            exit 1
          fi
          echo "Action executed successfully (outcome: ${{ steps.test-action.outcome }})"
